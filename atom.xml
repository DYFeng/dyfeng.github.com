<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DY.Feng's Blog 叶毅锋的博客]]></title>
  <link href="http://www.dyfeng.org/atom.xml" rel="self"/>
  <link href="http://www.dyfeng.org/"/>
  <updated>2012-08-15T02:43:57+08:00</updated>
  <id>http://www.dyfeng.org/</id>
  <author>
    <name><![CDATA[(≧▼≦) 喵喵]]></name>
    <email><![CDATA[yyfeng88625@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git使用大全]]></title>
    <link href="http://www.dyfeng.org/2012/08/12/all-about-git/"/>
    <updated>2012-08-12T00:38:00+08:00</updated>
    <id>http://www.dyfeng.org/2012/08/12/all-about-git</id>
    <content type="html"><![CDATA[<p>虽然关于Git的使用有很多文章，但是没有一篇是全面而且解释清楚的，以致我到现在还只是通晓几个Git的命令而已。</p>

<p>在一个本地Git仓库里面，我们会按顺序遇到3个地方：</p>

<ul>
<li>本地文件，他持有<code>实际文件</code>。</li>
<li>缓存区（index），临时保存你的改动，例如<code>git add</code>就是保存到缓存区。缓冲区文件是<code>.git/index</code>。</li>
<li>本地仓库。本地仓库储存的实际文件在<code>.git/objects</code>目录。<em>HEAD不是一个实际的仓库！！</em>所谓的HEAD，其实就像一个<code>指针</code>，指向你最近一次提交后的结果。例如<code>cat .git/HEAD</code>后得到<code>ref: refs/heads/master</code>这么一串东西，其实他的意思就是现在的<code>HEAD</code>指向<code>.git/refs/heads/master</code>文件。再跟踪下去我们就会发现<code>.git/refs/heads/master</code>里面包含了一串32位的sha码。没错，这就是真正的提交结果，也就是git commit之后git给你的结果。</li>
</ul>


<p>为了实验，我先在我的Github上新建一个名为<code>test_on_github</code>的仓库，不添加README和.gitignore，纯绿色的哦。</p>

<p>下面开始试验。</p>

<!--more-->


<h1>Local本地</h1>

<h2>初始化</h2>

<h3>设置全局变量</h3>

<p>名字和Email会作为Github显示的依据。你不设置，没问题，只是Github的提交里显示不出你的用户名而已。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global user.name "DY.Feng"
</span><span class='line'>git config --global user.email "yyfeng88625"
</span><span class='line'>git config --global color.ui "always"</span></code></pre></td></tr></table></div></figure>


<h3>初始化新版本库</h3>

<p>初始化，只会在根目录下创建一个<code>.git</code>的文件夹。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init</span></code></pre></td></tr></table></div></figure>


<p>初始化后的目录结构</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tree .git/
</span><span class='line'>.git/
</span><span class='line'>├── branches
</span><span class='line'>├── config
</span><span class='line'>├── description
</span><span class='line'>├── HEAD
</span><span class='line'>├── hooks
</span><span class='line'>│   ├── applypatch-msg.sample
</span><span class='line'>│   ├── commit-msg.sample
</span><span class='line'>│   ├── post-update.sample
</span><span class='line'>│   ├── pre-applypatch.sample
</span><span class='line'>│   ├── pre-commit.sample
</span><span class='line'>│   ├── prepare-commit-msg.sample
</span><span class='line'>│   ├── pre-rebase.sample
</span><span class='line'>│   └── update.sample
</span><span class='line'>├── info
</span><span class='line'>│   └── exclude
</span><span class='line'>├── objects
</span><span class='line'>│   ├── info
</span><span class='line'>│   └── pack
</span><span class='line'>└── refs
</span><span class='line'>    ├── heads
</span><span class='line'>    └── tags</span></code></pre></td></tr></table></div></figure>


<h3>设置忽略文件</h3>

<ul>
<li>新建<code>.gitignore</code>文件并提交。</li>
<li>修改<code>.git/info/exclude</code>文件，支持正则表达式，例如<code>*.[oa]</code>等价于 <code>*.o</code> 和 <code>*.a</code>。这个方法只适用于你个人。</li>
</ul>


<h2>日常操作</h2>

<h3>添加文件到缓存区</h3>

<ul>
<li>添加个别文件。<code>git add somefile1 somefile2</code></li>
<li>添加本目录所有txt文件。<code>git add *.txt</code></li>
<li><code>递归</code>添加所有文件，不包括空目录。<code>git add .</code></li>
</ul>


<h3>从缓存区删除文件</h3>

<p>用法跟rm一样，<code>git rm --cached</code>。</p>

<ul>
<li>删除单个文件。<code>git rm --cached somefile</code></li>
<li>递归删除。<code>git rm --cached -r .</code></li>
</ul>


<h3>查看当前缓存区的情况</h3>

<p>当前缓存区的情况是<code>注释</code>掉的，这也正常嘛，还没正式提交。<code>git status</code>是查看当前缓存区（index）和HEAD之间的差异。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status</span></code></pre></td></tr></table></div></figure>


<p>例如下面的例子就是说明:当前缓存区比HEAD要多一个文件<code>c.txt</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status 
</span><span class='line'># On branch master
</span><span class='line'># Changes to be committed:
</span><span class='line'>#   (use "git reset HEAD &lt;file&gt;..." to unstage)
</span><span class='line'>#
</span><span class='line'>#       new file:   c.txt
</span><span class='line'>#</span></code></pre></td></tr></table></div></figure>


<h3>从HEAD签出文件</h3>

<p><code>签出</code>这个词在用惯svn的童鞋眼中肯定很熟悉，可你得注意，这里的签出是指从<code>本地仓库</code>签出而已，不是签出远程的服务器。</p>

<p>从HEAD签出文件意味着把HEAD时的状态的文件复制出来，再次强调<code>HEAD</code>指的是最后一次提交（git commit）的状态。如果当前文件已经加入到了<code>缓存区</code>，这个动作也会把他从缓存区删除。但<em>不建议</em>把这个作为<code>撤销加入缓存区</code>的方法，因为签出会把文件也变回最后一次提交的状态，如果你已经修改过文件，那你的修改就全无了。如果你要撤销文件加入缓存区，请用<code>git rm --cached</code>。</p>

<ul>
<li>签出所有文件。<code>git checkout HEAD .</code></li>
<li>签出所有txt文件。<code>git checkout HEAD *.txt</code></li>
<li>签出个别文件。<code>git checkout HEAD somefile1 somefile2</code></li>
</ul>


<p>在这里面，我们不一定要用<code>HEAD</code>，就像我一开始说的，其实HEAD只是代表了一个32位的sha标记而已，指向最新的那次修改。<code>git log</code>就能看到本地所有的提交，每次提交都有一个32位的标记，我们的HEAD就是指向最新的那个标记。既然我们知道了原理，那我们就可以在任意一次<code>commit</code>里签出我们想要的文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log #找到我们要签出的那次`commit`标记是多少
</span><span class='line'>commit 341c1e6921b61468ffd38ac423d7cf1120d7b086
</span><span class='line'>Author: DY.Feng &lt;yyfeng88625@gmail.com&gt;
</span><span class='line'>Date:   Mon Aug 13 05:22:11 2012 +0800
</span><span class='line'>
</span><span class='line'>    mod b to 1
</span><span class='line'>
</span><span class='line'>commit 0b5f275b20e40b51cca7bd64b2d8e50693c6660b
</span><span class='line'>Author: DY.Feng &lt;yyfeng88625@gmail.com&gt;
</span><span class='line'>Date:   Mon Aug 13 05:21:24 2012 +0800
</span><span class='line'>
</span><span class='line'>    add b,mod a to 1
</span><span class='line'>
</span><span class='line'>commit f0b121cf65b11d6b58b30531eb2415ddf0cbe451
</span><span class='line'>Author: DY.Feng &lt;yyfeng88625@gmail.com&gt;
</span><span class='line'>Date:   Mon Aug 13 04:56:14 2012 +0800
</span><span class='line'>
</span><span class='line'>    rm -
</span><span class='line'>
</span><span class='line'>commit 5f1d4283f52a825ca706b8dd039afc0dee3aa1b2
</span><span class='line'>Author: DY.Feng &lt;yyfeng88625@gmail.com&gt;
</span><span class='line'>Date:   Mon Aug 13 04:23:06 2012 +0800
</span><span class='line'>
</span><span class='line'>    first
</span><span class='line'>
</span><span class='line'>$ git checkout 0b5f275b20e40b51cca7bd64b2d8e50693c6660b b.txt #签出倒数第二次提交时，我们的b.txt</span></code></pre></td></tr></table></div></figure>


<h3>提交修改到本地仓库</h3>

<ul>
<li>提交之前<code>git add</code>过的。<code>git commit -m "提交信息"</code></li>
<li>提交所有修改，省略<code>git add</code>步骤。<code>git commit -m "提交信息" -a</code></li>
<li>提交单个文件，注意此文件必须是<code>git add</code>之后的。<code>git commit -m "提交信息" somefile</code></li>
<li>增补提交，复用HEAD留言（修改小错误，而不增加提交记录，掩盖自己的小马虎）。<code>git commit -C HEAD -a --amend</code></li>
</ul>


<p><em>注意：</em>修改过的文件在<code>git commit</code>之前也必须<code>git add</code>一次。</p>

<h1>Remote远程</h1>

<p>这里的<code>远程</code>并不是配置远程Git服务器，而是<code>本地</code>的一些配置和操作。</p>

<h2>初始化</h2>

<h3>克隆版本库</h3>

<p>克隆版本库这个是我们最常用<code>获取代码</code>的方法。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:DYFeng/test_on_github.git</span></code></pre></td></tr></table></div></figure>


<p>克隆后你会发现Github已经帮你填写好几样东西：远程<code>origin</code>配置和分支<code>master</code>配置。origin其实是一个<code>别名</code>，远程仓库remote的别名。而分支配置<code>[branch "master"]</code>里则写明了：我的远程端是<code>origin</code>。其实这个<code>origin</code>也可以自己改一个名字，origin这个只是大众默认名字而已。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git@github.com:DYFeng/test_on_github.git
</span><span class='line'>$ cd test_on_github
</span><span class='line'>$ cat .git/config
</span><span class='line'>[core]
</span><span class='line'>    repositoryformatversion = 0
</span><span class='line'>    filemode = true
</span><span class='line'>    bare = false
</span><span class='line'>    logallrefupdates = true
</span><span class='line'>[remote "origin"]
</span><span class='line'>    fetch = +refs/heads/*:refs/remotes/origin/*
</span><span class='line'>    url = git@github.com:DYFeng/test_on_github.git
</span><span class='line'>[branch "master"]
</span><span class='line'>    remote = origin
</span><span class='line'>    merge = refs/heads/master</span></code></pre></td></tr></table></div></figure>


<h3>手动添加删除远程仓库</h3>

<p>其实就是生成上面<code>[remote "origin"]</code>小节的东西。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add origin git@github.com:DYFeng/test_on_github.git</span></code></pre></td></tr></table></div></figure>


<h3>删除别名和相关分支</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote rm origin</span></code></pre></td></tr></table></div></figure>


<h3>创建一个空本地仓库</h3>

<p>没有远程配置也没有分支配置，而且他把<code>.git</code>里面的文件都新建到外面了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init --bare
</span><span class='line'>$ cat config 
</span><span class='line'>[core]
</span><span class='line'>    repositoryformatversion = 0
</span><span class='line'>    filemode = true
</span><span class='line'>    bare = true</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为rake添加命令补全]]></title>
    <link href="http://www.dyfeng.org/2012/08/12/bash-completion-for-rake/"/>
    <updated>2012-08-12T00:32:00+08:00</updated>
    <id>http://www.dyfeng.org/2012/08/12/bash-completion-for-rake</id>
    <content type="html"><![CDATA[<p>为了用上Octopress，最近我没有少跟rake打交道。不过用起来始终有点不爽–命令补全没有了，没有make用得那么爽。虽然用<code>rake -T</code>可以列出所有的任务，但是始终没有一个Tab键补全方便。</p>

<p>幸亏觉得不方便的不止我一个人，Google了下，发现已经有人写出了基于bash-completion的<a href="http://turadg.aleahmad.net/2011/02/bash-completion-for-rake-tasks/">补全插件</a>，还带缓存的。</p>

<!-- more-->


<p>把下面的文件保存到<code>completions.d</code>目录（在ubuntu上是/etc/bash_completion.d）</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># bash completion for rake</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># some code from on Jonathan Palardy&#39;s http://technotales.wordpress.com/2009/09/18/rake-completion-cache/</span>
</span><span class='line'><span class="c"># and http://pastie.org/217324 found http://ragonrails.com/post/38905212/rake-bash-completion-ftw</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># For details and discussion</span>
</span><span class='line'><span class="c"># http://turadg.aleahmad.net/2011/02/bash-completion-for-rake-tasks/</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># INSTALL</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Place in your bash completions.d and/or source in your .bash_profile</span>
</span><span class='line'><span class="c"># If on a Mac with Homebrew, try &quot;brew install bash-completion&quot;</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># USAGE</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Type &#39;rake&#39; and hit tab twice to get completions.</span>
</span><span class='line'><span class="c"># To clear the cache, run rake_cache_clear() in your shell.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>_rake_cache_path<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c"># If in a Rails app, put the cache in the cache dir</span>
</span><span class='line'>  <span class="c"># so version control ignores it</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -e <span class="s1">&#39;tmp/cache&#39;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="nv">prefix</span><span class="o">=</span><span class="s1">&#39;tmp/cache/&#39;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;${prefix}.rake_t_cache&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>rake_cache_store<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  rake --tasks --silent &gt; <span class="s2">&quot;$(_rake_cache_path)&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>rake_cache_clear<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  rm -f .rake_t_cache
</span><span class='line'>  rm -f tmp/cache/.rake_t_cache
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">COMP_WORDBREAKS</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDBREAKS</span><span class="p">/\:/</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>_rakecomplete<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c"># error if no Rakefile</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> ! -e Rakefile <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;missing Rakefile&quot;</span>
</span><span class='line'>    <span class="k">return </span>1
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># build cache if missing</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> ! -e <span class="s2">&quot;$(_rake_cache_path)&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>rake_cache_store
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">local </span><span class="nv">tasks</span><span class="o">=</span><span class="sb">`</span>awk <span class="s1">&#39;{print $2}&#39;</span> <span class="s2">&quot;$(_rake_cache_path)&quot;</span><span class="sb">`</span>
</span><span class='line'>  <span class="nv">COMPREPLY</span><span class="o">=(</span><span class="k">$(</span><span class="nb">compgen</span> -W <span class="s2">&quot;${tasks}&quot;</span> -- <span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[COMP_CWORD]</span><span class="k">})</span><span class="o">)</span>
</span><span class='line'>  <span class="k">return </span>0
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -o default -o nospace -F _rakecomplete rake
</span></code></pre></td></tr></table></div></figure>


<p>在当前shell载入补全</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">source</span> /etc/bash_completion.d/rake
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Octopress as Github Blog on Ubuntu 12.04]]></title>
    <link href="http://www.dyfeng.org/2012/08/12/using-octopress-as-github-blog/"/>
    <updated>2012-08-12T00:00:00+08:00</updated>
    <id>http://www.dyfeng.org/2012/08/12/using-octopress-as-github-blog</id>
    <content type="html"><![CDATA[<p>本来我的Github blog是使用<code>Jekyll-Bootstrap</code>作为生成引擎。不过他是把文章发给Github解析的，由于Github出于安全考虑，限制ruby脚本的运行，这样就导致很多功能实现不了。这时候我发现了<code>Octopress</code>引擎，他把你的branch分成两个，一个master，负责放置静态的页面，一个是source，放置程序本身和Markdown日志。</p>

<!-- more -->


<h1>名词解释</h1>

<p>无论是<code>Jekyll-Bootstrap</code>还是<code>Octopress</code>，他们都用到了<code>ruby</code>写的后端<code>jekyll</code>，我对<code>ruby</code>基本上没有多少接触，看到N个<code>ruby</code>的名词更是晕了，在此记录下</p>

<ul>
<li><p>Gem
ruby的<code>easy_install</code>，用来安装各种库，是用<code>ruby</code>写的，全称叫<code>rubygems</code>。</p></li>
<li><p>Bundler
基于gem的更高级管理工具，bundler相对于gem就好比apt-get相对于aptitude。不过他不是单纯的下载安装，他会根据本目录的<code>Gemfile</code>文件，把你缺少的包给装上。</p></li>
<li><p>Rvm
<code>Ruby Version Manager</code>，用来安装各种版本的ruby，问题是ubuntu有apt-get，这个不大派上用场。</p></li>
<li><p>Rbenv
<code>Simple Ruby Version Management</code>，也是用来安装各种版本的<code>ruby</code>。</p></li>
<li><p>Rake
<code>Ruby Make</code>，顾名思义就是ruby写的make，他对应的Makefile是<code>Rakefile</code></p></li>
</ul>


<h1>安装Octopress</h1>

<h2>配置安装环境</h2>

<h3>安装ruby 1.9.3</h3>

<p>要安装<code>Octopress</code>，必须有<code>ruby 1.9.3</code>。因为我不喜欢用第三方软件来安装<code>ruby</code>，所以我是<a href="http://lenni.info/blog/2012/05/installing-ruby-1-9-3-on-ubuntu-12-04-precise-pengolin/" title="Installing Ruby on Ubuntu 12.04">用apt-get的方式安装Ruby</a>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install ruby1.9.1 ruby1.9.1-dev <span class="se">\</span>
</span><span class='line'>rubygems1.9.1 irb1.9.1 ri1.9.1 rdoc1.9.1 <span class="se">\</span>
</span><span class='line'>build-essential libopenssl-ruby1.9.1 libssl-dev zlib1g-dev
</span><span class='line'>
</span><span class='line'>sudo update-alternatives --install /usr/bin/ruby ruby /usr/bin/ruby1.9.1 400 <span class="se">\</span>
</span><span class='line'>    --slave   /usr/share/man/man1/ruby.1.gz ruby.1.gz <span class="se">\</span>
</span><span class='line'>    /usr/share/man/man1/ruby1.9.1.1.gz <span class="se">\</span>
</span><span class='line'>    --slave   /usr/bin/ri ri /usr/bin/ri1.9.1 <span class="se">\</span>
</span><span class='line'>    --slave   /usr/bin/irb irb /usr/bin/irb1.9.1 <span class="se">\</span>
</span><span class='line'>    --slave   /usr/bin/rdoc rdoc /usr/bin/rdoc1.9.1
</span><span class='line'>
</span><span class='line'>sudo update-alternatives --config ruby
</span><span class='line'>sudo update-alternatives --config gem
</span><span class='line'>
</span><span class='line'>ruby --version
</span></code></pre></td></tr></table></div></figure>


<p>这样子，我们就不需要用到<code>rvm</code>或者<code>rbenv</code>这些东西了。要注意一点的是，虽然看上去我们装的是<code>1.9.1</code>，其实他是<code>Ruby 1.9.3-p0</code>。为什么他又叫<code>1.9.1</code>呢？因为这个<code>1.9.1</code>只是一个<code>ABI</code>版本号而已。<code>ubuntu</code>有一个<code>ruby1.9.3</code>的虚包，其实也是指向<code>1.9.1</code>的。</p>

<h3>下载安装Octopress</h3>

<p>下载Octopress，再次确定<code>ruby</code>版本</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress    <span class="c"># If you use RVM, You&#39;ll be asked if you trust the .rvmrc file (say yes).</span>
</span><span class='line'>ruby --version  <span class="c"># Should report Ruby 1.9.3</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装<code>bundler</code>并使用<code>bundler</code>安装依赖</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>安装默认Octopress主题</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure>


<h2>部署到Github</h2>

<p>其实部署Github非常简单。</p>

<p>交互式输入你的Github仓库地址（<code>git@github.com:username/username.github.com.git</code>，把<code>username</code>替换成你的用户名）。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>把你的域名提交给Github。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;www.dyfeng.org&#39;</span> &gt; <span class="nb">source</span>/CNAME
</span></code></pre></td></tr></table></div></figure>


<p>在<code>public</code>目录生成页面。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span></code></pre></td></tr></table></div></figure>


<p>将<code>public</code>里的静态页面复制到<code>_deploy</code>目录,上传到master branch</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>上传程序本身到source branch</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;init&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个时候，如果一切正常，你应该可以看到你的<code>Octopress Blog</code>了。</p>

<h2>本地预览</h2>

<p>打开<a href="http://localhost:4000">http://localhost:4000</a>即可看到效果。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<h1>配置Octopress</h1>

<p>看看你的<code>_config.yml</code>文件，blog的基本设置都在里面了，包括第三方插件的设置。</p>

<p>在这里我们有<a href="https://github.com/imathis/octopress/wiki/List-Of-Octopress-Themes">一箩筐主题</a>供君选择，虽然能落入我法眼的真不多…我选择了<a href="http://mrzhang.me/">张神仙</a>童鞋的<a href="http://mrzhang.me/blog/blog-equals-github-plus-octopress.html">主题</a>，先用着先，以后再慢慢改。下面在默认主题的前提下安装他主题的方法。</p>

<h2>更改Octopress主题</h2>

<p>先下载一份</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/jsw0528/octopress.git shenxian
</span><span class='line'><span class="nb">cd </span>shenxian
</span><span class='line'>bundle install
</span><span class='line'>git submodule init
</span><span class='line'>git submodule update
</span></code></pre></td></tr></table></div></figure>


<p>他的主题主要是新增加了<code>两个插件</code>，和一个<code>主题文件夹</code></p>

<ul>
<li>plugins/sh_js.rb</li>
<li>plugins/tag_generator.rb</li>
<li>.theme/blog</li>
</ul>


<p>复制到我们的Octopress里去</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp plugins/sh_js.rb ../octopress/plugins/
</span><span class='line'>cp plugins/tag_generator.rb ../octopress/plugins/
</span><span class='line'>cp -R .theme/blog ../octopress/.theme/
</span></code></pre></td></tr></table></div></figure>


<p>他的<code>tag_generator.rb</code>插件似乎在我的机子上有点问题，出错信息为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tag_generator.rb:55:in `join': can't convert nil into String (TypeError)
</span><span class='line'>from /media/DOCUMENT/github/octopress/plugins/tag_generator.rb:55:in `block in write_tag_indexes'
</span><span class='line'>from /media/DOCUMENT/github/octopress/plugins/tag_generator.rb:54:in `each'
</span><span class='line'>from /media/DOCUMENT/github/octopress/plugins/tag_generator.rb:54:in `write_tag_indexes'
</span><span class='line'>from /media/DOCUMENT/github/octopress/plugins/tag_generator.rb:73:in `generate'
</span><span class='line'>from /var/lib/gems/1.9.1/gems/jekyll-0.11.2/lib/jekyll/site.rb:184:in `block in generate'
</span><span class='line'>from /var/lib/gems/1.9.1/gems/jekyll-0.11.2/lib/jekyll/site.rb:183:in `each'
</span><span class='line'>from /var/lib/gems/1.9.1/gems/jekyll-0.11.2/lib/jekyll/site.rb:183:in `generate'
</span><span class='line'>from /var/lib/gems/1.9.1/gems/jekyll-0.11.2/lib/jekyll/site.rb:39:in `process'
</span><span class='line'>from /var/lib/gems/1.9.1/gems/jekyll-0.11.2/bin/jekyll:250:in `&lt;top (required)="">'
</span><span class='line'>from /usr/local/bin/jekyll:19:in `load'
</span><span class='line'>from /usr/local/bin/jekyll:19:in `&lt;main>'</span></code></pre></td></tr></table></div></figure>


<p>解决方法是将<code>tag_generator.rb</code>55行</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">write_tag_index</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;tag_dir&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">tag</span><span class="o">.</span><span class="n">to_url</span><span class="o">.</span><span class="n">downcase</span><span class="p">),</span> <span class="n">tag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>改为</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">write_tag_index</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;tag_dir&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">tag</span><span class="o">.</span><span class="n">to_url</span><span class="o">.</span><span class="n">downcase</span><span class="p">),</span> <span class="n">tag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>切换主题</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ../octopress/
</span><span class='line'>rake install<span class="o">[</span><span class="s1">&#39;blog&#39;</span><span class="o">]</span>
</span><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>现在打开<a href="http://localhost:4000">http://localhost:4000</a>应该可以看到效果了。</p>

<h1>使用Octopress</h1>

<p>新建文章，很贴心的一点是中文的题目他会转换为拼音，一些特殊符号他都会帮你转成相应的英文。不过为了更好地SEO，最好还是起一个有意义的题目，而不是一堆拼音。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;The Title of Your Article&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post on Github]]></title>
    <link href="http://www.dyfeng.org/2012/08/11/first-post-on-github/"/>
    <updated>2012-08-11T00:00:00+08:00</updated>
    <id>http://www.dyfeng.org/2012/08/11/first-post-on-github</id>
    <content type="html"><![CDATA[<p>Included file &#8216;JB/setup&#8217; not found in _includes directory</p>

<p>终于出炉了！！这是我第一篇用github做blog的文章！！小生愚钝，在Win7下弄了4个小时才弄出来。遇到了cygwin和gem不兼容、gem源被墙、jekyll在Win7下各种奇怪的症状&#8230;得感叹下在Windows下生活的孩子不容易吖。</p>

<p>因为在Windows下操作，入乡随俗地下载了个Github的Windows客户端，那界面很炫，很有Win8 feel，难道这就是传说中的WinForm。可惜就是push的时候太慢了点，感觉要比命令行下要慢半拍。而且他在界面里不叫push，叫sync，这个名词更容易让人理解。</p>

<p>下面是各种华丽的Markdown测试</p>

<pre class="prettyprint">
require 'redcarpet'
markdown = Redcarpet.new("Hello World!")
puts markdown.to_html
</pre>




<pre class="prettyprint">
##大标题
###小标题
####小小标题
#####小小小标题
######你还能再小点不
#######其实我能一直地小，只是css没有定义到了
</pre>


<h2>大标题</h2>

<h3>小标题</h3>

<h4>小小标题</h4>

<h5>小小小标题</h5>

<h6>你还能再小点不</h6>

<h6>#其实我能一直地小，只是css没有定义到了</h6>

<pre class="prettyprint">
*强调一下*

**再强调一下**

***我次次强调我容易吗我***
</pre>


<p><em>强调一下</em></p>

<p><strong>再强调一下</strong></p>

<p><strong><em>我次次强调我容易吗我</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[减少xampp内存占用]]></title>
    <link href="http://www.dyfeng.org/2012/08/11/decrease-threads-with-xampp/"/>
    <updated>2012-08-11T00:00:00+08:00</updated>
    <id>http://www.dyfeng.org/2012/08/11/decrease-threads-with-xampp</id>
    <content type="html"><![CDATA[<p>Included file &#8216;JB/setup&#8217; not found in _includes directory</p>

<p>最近有个改写moodle系统插件的项目，所以我又重操起php的老行当。moodle是一个非常不错的考试系统，多种题型，多种计分方式，唯一的缺点就是文档太少，非常的缺&#8230;开发人员列表里面也看到了好几个中国人的名字。</p>

<p>下载，放到htdocs，<code>sudo lampp start</code>，结果发现他竟然要求php5.3以上。我的php还是5.1的老版本，那没法，唯有下载个最新的xampp吧。一切还算顺利，除了xampp好像怪怪的。因为我改了配置文件后，再重启，他竟然好像没有反应，这个到现在还是个不解之谜。</p>

<p>在开发的过程中，我还发现电脑卡了很多，<code>ps -A|grep httpd</code>一看，哇的一刷。内存给我用了几百兆了，虽然我有4G也不是这样浪费的嘛，我只是开发而已，没有必要开这么线程。下面记录一下给xampp减少线程的方法。</p>

<!--more-->


<h1>减少xampp线程数，享受低碳生活</h1>

<h2>先看看Apache现在是在什么模式下工作</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/opt/lampp/bin/apachectl -lCompiled in modules:
</span><span class='line'>core.c
</span><span class='line'>prefork.c
</span><span class='line'>http_core.c
</span><span class='line'>mod_so.c
</span></code></pre></td></tr></table></div></figure>


<p>看到了吧，原来xampp的Apache默认是在<em>prefork</em>模式下跑的，那我们得相应修改prefox模式的进程数。</p>

<h2>修改Apache配置</h2>

<h3>修改httpd.conf</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim etc/httpd.conf
</span></code></pre></td></tr></table></div></figure>


<p>找到<code>#Include etc/extra/httpd-mpm.conf</code>去掉注释，保存。</p>

<h3>修改httpd-mpm.conf</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim etc/extra/httpd-mpm.conf
</span></code></pre></td></tr></table></div></figure>


<p>找到</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;IfModule mpm_prefork_module>
</span><span class='line'>    StartServers          2
</span><span class='line'>    MinSpareServers       2
</span><span class='line'>    MaxSpareServers      5
</span><span class='line'>    MaxClients          5
</span><span class='line'>    MaxRequestsPerChild   0
</span><span class='line'> &lt;/IfModule></span></code></pre></td></tr></table></div></figure>


<p>修改其中的参数，下面是这几个参数的详细解释：</p>

<p>Apache一开始会新建<em>StartServers</em>个子进程后，为了满足<em>MinSpareServers</em>设置的需要，创建一个进程，等待一秒钟，继续创建两个，再等待一秒钟，继续创建四个……如此按指数级增加创建的进程数，最多达到每秒32个，直到满足<em>MinSpareServers</em>设置的值为止。</p>

<p>这种模式可以不必在请求到来时再产生新的进程，从而减小了系统开销以增加性能。<em>MaxSpareServers</em>设置了最大的空闲进程数，如果空闲进程数大于这个值，Apache会自动kill掉一些多余进程。这个值不要设得过大，但如果设的值比MinSpareServers小，Apache会自动把其调整为 MinSpareServers+1。</p>

<p>如果站点负载较大，可考虑同时加大<em>MinSpareServers</em>和<em>MaxSpareServers</em>。 <em>MaxRequestsPerChild</em>设置的是每个子进程可处理的请求数。每个子进程在处理了<em>MaxRequestsPerChild</em>个请求后将自动销毁。0意味着无限，即子进程永不销毁。虽然缺省设为0可以使每个子进程处理更多的请求，但如果设成非零值也有两点重要的好处：</p>

<blockquote><ol>
<li>可防止意外的内存泄漏。</li>
<li>在服务器负载下降的时侯会自动减少子进程数。</li>
</ol>
</blockquote>

<p>因此，可根据服务器的负载来调整这个值。<em>MaxClients</em>是这些指令中最为重要的一个，设定的是 Apache可以同时处理的请求，是对Apache性能影响最大的参数。其缺省值150是远远不够的，如果请求总数已达到这个值（可通过<code>ps -ef|grep http|wc -l</code>来确认），那么后面的请求就要排队，直到某个已处理请求完毕。这就是系统资源还剩下很多而HTTP访问却很慢的主要原因。虽然理论上这个值越大，可以处理的请求就越多，但Apache默认的限制不能大于256。</p>
]]></content>
  </entry>
  
</feed>
