<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DY.Feng's Blog 叶毅锋的博客]]></title>
  <link href="http://www.dyfeng.org/atom.xml" rel="self"/>
  <link href="http://www.dyfeng.org/"/>
  <updated>2012-08-18T19:36:07+08:00</updated>
  <id>http://www.dyfeng.org/</id>
  <author>
    <name><![CDATA[(≧▼≦) 喵喵]]></name>
    <email><![CDATA[yyfeng88625@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[修改octopress的pygment语法]]></title>
    <link href="http://www.dyfeng.org/2012/08/18/change-the-pygment-lexer-of-octopress/"/>
    <updated>2012-08-18T18:43:00+08:00</updated>
    <id>http://www.dyfeng.org/2012/08/18/change-the-pygment-lexer-of-octopress</id>
    <content type="html"><![CDATA[<p>最近我在写一篇关于Git使用的文章，里面贴了大量<code>bash</code>命令。我的语法高亮是用Octopress自带的<code>pygements.rb</code>，用起来总觉得不大爽，因为他高亮的地方实在是太少了，只有少量的命令有高亮。自己动手丰衣足食，下面记录我修改的过程：</p>

<!-- more -->


<h1>Octopress语法高亮原理</h1>

<p>我要修改Octopress的语法高亮，当然得搞清楚他的来龙去脉。</p>

<p>首先在<code>plugins</code>目录下你会看到<code>pygments_code.rb</code>插件，这个插件的功能就是调用<code>pygements.rb</code>库，把代码转换成html，还在你项目的<code>.pygements-cache</code>目录下缓存代码块。代码样式他其实是通过css调节的，他生成的只是一个堆html标签。</p>

<p><code>pygements.rb</code>库其实是ruby封装了python的<code>pygements</code>库，而且<code>pygements.rb</code>里面已经自带了一个<code>pygements</code>库（这真不是一个好主意，系统讲究的应该是低耦合）。</p>

<p>就这样&#8230;</p>

<ol>
<li>Octopress调用pygments_code.rb插件。</li>
<li>pygments_code.rb插件调用pygements.rb库。</li>
<li>pygements.rb库调用python的pygements库。</li>
</ol>


<p>完成了对代码的语法高亮。</p>

<h1>修改Octopress语法高亮规则</h1>

<p>你先要确保你的电脑上其他地方没有安装python的<code>pygements</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">sudo</span> apt-get remove python-pygments
</span></code></pre></td></tr></table></div></figure>


<p>，我们先找出你<code>pygments.rb</code>的安装目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">bundle</span> show pygments.rb
</span><span class='line'>/var/lib/gems/1.9.1/gems/pygments.rb-0.2.13
</span></code></pre></td></tr></table></div></figure>


<p>修改<code>pygements.rb</code>自带python<code>pygments</code>库的语法文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> YOUR_PYGEMENTS.RB_PATH/vendor/pygments-main/
</span><span class='line'><span class="nv">$ </span><span class="nb">vim</span> pygments/lexers/shell.py
</span></code></pre></td></tr></table></div></figure>


<p>找到<code>BashLexer</code>下<code>tokens</code>字典，<code>basic</code>下，大概修改成这个样子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># (r&#39;\b(alias|bg|bind|break|find|builtin|caller|cd|command|compgen|&#39;</span>
</span><span class='line'><span class="c">#  r&#39;complete|declare|dirs|disown|echo|cat|enable|eval|exec|exit|&#39;</span>
</span><span class='line'><span class="c">#  r&#39;export|false|fc|fg|getopts|hash|help|history|jobs|kill|let|&#39;</span>
</span><span class='line'><span class="c">#  r&#39;local|logout|popd|printf|pushd|pwd|read|readonly|set|shift|&#39;</span>
</span><span class='line'><span class="c">#  r&#39;shopt|source|suspend|test|time|times|trap|true|type|typeset|&#39;</span>
</span><span class='line'><span class="c">#  r&#39;ulimit|umask|unalias|unset|wait&#39;</span>
</span><span class='line'><span class="c">#  r&#39;)\s*\b(?!\.)&#39;,</span>
</span><span class='line'><span class="c">#  Name.Builtin),</span>
</span><span class='line'><span class="p">(</span><span class="s">r&#39;(?&lt;=\$\s)\b\w+&#39;</span><span class="p">,</span><span class="n">Name</span><span class="o">.</span><span class="n">Builtin</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>一开始我是想遍历<code>PATH</code>下所有目录，把里面的命令都动态加上，但python的正则抗议太多选项了，所以我就唯有手动改规则了。现在的规则是以<code>$</code>开头的一个单词定义为命令。</p>

<p>最后一步千万不要漏了，清除<code>pygments_code.rb</code>插件的缓存，重新生成页面</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">rm</span> -rf .pygments-cache/*
</span><span class='line'><span class="nv">$ </span><span class="nb">rake</span> generate
</span><span class='line'><span class="nv">$ </span><span class="nb">rake</span> preview
</span></code></pre></td></tr></table></div></figure>


<p>现在你应该看到bash的语法高亮<code>亮</code>多了吧。</p>

<h1>参考文献</h1>

<ol>
<li><a href="http://pygments.org/docs/lexerdevelopment/">如何编写pygements的语法规则</a>，来自pygements官网</li>
<li><a href="http://docs.python.org/library/re.html">python正则表达式参考</a>，来自python官网</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git深入浅出学习]]></title>
    <link href="http://www.dyfeng.org/2012/08/12/all-about-git/"/>
    <updated>2012-08-12T00:38:00+08:00</updated>
    <id>http://www.dyfeng.org/2012/08/12/all-about-git</id>
    <content type="html"><![CDATA[<p>在看这篇文章之前&#8230;</p>

<ul>
<li><p>如果你只是在找Git的使用命令，而不是想深入学习Git，请绕道。</p>

<p>Git和Linux一样，不是学几个命令就能理解到他的精髓的。</p></li>
<li><p>什么？你在Windows下？那你一定懂Cygwin了。不知道Cygwin？那你看这篇文章就有点吃力了。还不会用命令行？那你可以绕道了，这篇文章对你来说是天书。</p></li>
<li><p>请先忘记你之前所了解关于Git的一切，因为网络上的文章有99%都是以纰传纰的！！</p></li>
<li><p>请先忘记你所有学的其他版本管理系统。</p>

<p>请统统忘记<code>Svn</code>、<code>Cvs</code>、<code>Mercury</code>等，因为Git的思想跟实现跟他们有天大的区别！！</p></li>
<li><p>请不要急于求成，网上99%速成的教程都是有速度没质量的。</p>

<p>我不是说他们写的质量差，而是因为很多东西他都给简化掉了，让人有个错觉：这个很简单。其实这是不利于学习的。</p></li>
<li><p>请先从<code>最基础</code>的学起，而不是直接看操作命令，否则你只会只其然而不知其所以然，最后看到一头雾水。</p></li>
<li><p>我一开始将不会讲解任何关于使用Git的命令，而是先讲解Git的<code>底层原理</code>，如果你耐不住性子的请不要看。但我相信，这会是最快入门Git的方法之一。</p></li>
<li><p>你大概需要几天时间来消化和试验，所以不用急，慢慢看。反正你都误用了这么长时间了，花点时间来正确认识Git还是值得的。</p></li>
</ul>


<!-- 因为囊括的东西比较多，所以我这篇文章比较。对于一个作者来说，罗列知识点很容易，但你要把知识点组织起来，让人思路清晰，脉络通畅，那就是难点了。 -->


<!--  -->


<!-- 建议阅读方法： -->


<!--  -->


<!-- 0. 你可以先大概浏览一下`Local本地使用`和`Remote远程相关使用`这两章，感受一下Git的大概使用，这两章是讲述Git的在各种使用场景下的命令，不必精读。如果只是想查找命令的童鞋，看这章就可以了。 -->


<!-- 1. 再看看第一章`Git基础讲解`，最基本的概念和Git的运作方式会在这里讲述。 -->


<!-- 2. 当你遇到有不明白的术语或者词汇，不妨到`相关术语以及本文翻译`那章找找。 -->


<!-- 3. 再回来`Local本地使用`和`Remote远程相关使用`这两章。相信这个时候你应该能通过这命令，而知道他们底层究竟是做了什么操作。 -->


<!-- 4. 有空的时候可以看看`小技巧` -->


<!-- 5. 如果对Git的使用还有什么疑问，可以留言。本人也是初学Git，可以共同探讨学习。 -->




<!--more-->


<h1>Git基础讲解</h1>

<h2>Git是什么？</h2>

<p><del>Git是一个版本控制软件&#8230;</del>（地球人都知道的就不废话了，省略几百字）Git就是</p>

<ul>
<li>一个带有<code>二次元平衡世界</code>、<code>时光倒流</code>功能的<code>文件管理系统</code>。</li>
<li>一个<code>键值对</code>的数据库，<code>键</code>是<code>值</code>的SHA1值。<code>tree .git/objects</code>你就能看到他们了。</li>
<li>一个一切皆对象的系统</li>
</ul>


<!-- 为什么说他是文件管理系统呢？那跟我电脑本地的文件管理系统有什么区别？这个就得从Git的`文件模型`--基础对象模型说起了。 -->


<p>Git说白了就是一个文件储存系统，只是他储存不单单是我们普通意义上的<code>文件</code>，他还储存了<code>tree（树）</code>，<code>commit（快照）</code>，<code>tag（标签）</code>。Git能够储存的东西我们叫做<code>基础对象</code>（Git Objects）。</p>

<p>其实我们用Git做的<em>一切</em>都是围绕着这些<code>基础对象</code>而展开的，所以先学懂这个比先去学习几句命令要重要得多。</p>

<h2>Git的基本对象类型（Git Objects）</h2>

<p>  在Git系统里面有四种基本对象类型，分别是<code>blob</code>，<code>tree（树）</code>，<code>commit（快照）</code>，<code>tag（标签）</code>。几乎所有的Git都建立在管理操纵四个简单的数据结构之上，即它是建立在机器文件系统之上的一种自己的小型文件系统。</p>

<p><code>commit</code>在其他的版本控制软件很多时候都是翻译成<code>提交</code>，但在Git上他不能翻译成<code>提交</code>。他在Git上是一个<code>对象</code>，一个<code>名词</code>，一个<code>noun</code>，一个快照。这一点在很多网络文章里面都是以纰传纰的。</p>

<h3>blob对象</h3>

<p>blob对象储存了我们平常接触的文件，但他只储存了这个文件的<code>内容</code>，而没有包含修改日期、拥有者、<em>文件名</em>、目录路径之类的信息。下面我们来做个实验：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;Hello,Git!&#39;</span> &gt; test.txt
</span><span class='line'>  <span class="nv">$ </span><span class="nb">git</span> hash-object test.txt
</span><span class='line'>  63008ae88b4446dfc43b47f18aee5b427203b255
</span></code></pre></td></tr></table></div></figure>


<p>你可看到他生成了一个40位的<code>SHA1</code>值，这SHA1值就是通过<code>文件内容</code>计算出来的，所以说同一个文件只有一个SHA1值。如果你在你的电脑上做同样内容的一个文件，即使文件名不一样，计算出来的结果都是一样的。</p>

<p>现在我们把<code>test.txt</code>纳入我们Git的引索（index）里面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> add test.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> commit -m <span class="s2">&quot;add test.txt&quot;</span> <span class="c">#这句不是必须的，git add之后就已经纳入到Git的引索里面去了</span>
</span></code></pre></td></tr></table></div></figure>


<p>提交之后，<code>test.txt</code>的内容已经放进了我们Git的blob树了，我们可以根据SHA1值来看看文件的内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file blob 63008ae88b4446dfc43b47f18aee5b427203b255
</span><span class='line'>Hello,Git!
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file blob 63008a  <span class="c">#其实用前六位或者七位就可以了</span>
</span><span class='line'>Hello,Git!
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file t 63008a  <span class="c">#查看对象类型</span>
</span><span class='line'>blob
</span></code></pre></td></tr></table></div></figure>


<p>blob只记录文件的内容的好处：
- Git可以快速的仅仅通过对象名称决定两个对象是否相同
- 由于对象名称在每一个库（repository）中都由相同的方式计算得到，相同的内容存储到不同的库中将总被存储到相同的名称下，减少需要的硬盘空间。</p>

<h3>commit对象</h3>

<p>如果你有小用过Git，那对commit一定很熟悉，不就是提交嘛，其实不然。在这里的commit表示<code>快照</code>，是名词。跟blob一样，也是Git的<code>基础对象</code>之一。</p>

<p>查看一个快照（commit）对象，可以看到快照里记录了根目录树，作者，还有提交的信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file commit d5cb71
</span><span class='line'>tree e84b991fd55acf5eb290a11c0ae4149ce4ffc8dd
</span><span class='line'>author DY.Feng &lt;yyfeng88625@gmail.com&gt; 1345233032 +0800
</span><span class='line'>committer DY.Feng &lt;yyfeng88625@gmail.com&gt; 1345233032 +0800
</span><span class='line'>
</span><span class='line'>add a.txt
</span></code></pre></td></tr></table></div></figure>


<p>在下一小节<code>tree对象</code>里，我们将会学到如何创建一个快照对象，因为快照必须需要一个<code>树（tree）对象</code>。</p>

<h3>tree对象</h3>

<p>树（tree）对象跟我们本地的目录树很相似，下面我们来试验：</p>

<p>准备试验用文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">mkdir</span> bb <span class="o">&amp;&amp;</span> touch bb/a.txt  <span class="c">#新建一个文件夹并放置一个空文件在里面</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> add bb/a.txt <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&quot;add bb/a.txt&quot;</span> <span class="c">#提交</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看HEAD（这里的HEAD其实不是树对象，而是快照对象），你会看到只有两个文件，一个是<code>test.txt</code>，另外一个是<code>树bb</code>，那还有一个文件<code>a.txt</code>呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> ls-tree HEAD
</span><span class='line'>040000 tree 65a457425a679cbe9adf0d2741785d3ceabb44a7    bb
</span><span class='line'>100644 blob 63008ae88b4446dfc43b47f18aee5b427203b255    test.txt
</span></code></pre></td></tr></table></div></figure>


<p>文件<code>a.txt</code>在<code>bb树</code>里面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$git</span> ls-tree 65a457425a679cbe9adf0d2741785d3ceabb44a7
</span><span class='line'>100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    a.txt
</span></code></pre></td></tr></table></div></figure>


<p>树也是Git的<code>基本对象</code>，所以准确来说：blob对象<em>不是</em>储存在树对象里面，而是树对象里面写有blob对象的<code>SHA1值</code>，所以tree对象可以查找到blob对象。</p>

<p>不知道你看到这里有没有发现，我们上面的树（tree）对象，我们并没有手动添加，在<code>git add</code>的时候也没有新增，而是在<code>git commit</code>之后增加的。究竟树对象是怎么新建的呢？下面我们来试验手动添加树对象：</p>

<p>重置我们的工作目录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">rm</span> -rf * .git/
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;Good bye&#39;</span> &gt; a.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> init
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> add a.txt
</span></code></pre></td></tr></table></div></figure>


<p>现在引索（stage）里有我们的a.txt了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> ls-files --stage
</span><span class='line'>100644 c0ee9ab00ab41be0d401f00f7a4aaf2e478f9f1e 0       a.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">find</span> .git/objects -type f | sort
</span><span class='line'>.git/objects/c0/ee9ab00ab41be0d401f00f7a4aaf2e478f9f1e
</span></code></pre></td></tr></table></div></figure>


<p>我们来创造一棵树吧，在你的电脑上应该会得到同样的一串SHA1值，因为这棵树里面的文件（文件名和文件SHA1值）我们是一样的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git write-tree
</span><span class='line'>e84b991fd55acf5eb290a11c0ae4149ce4ffc8dd
</span></code></pre></td></tr></table></div></figure>


<p>有了一棵树，我们就能创造出一个快照（commit）了。记得前面说过，一个快照（commit）里面包含了一个树对象的SHA1值，所以你如果要创造一个快照（commit），就必须有一棵树。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;add a.txt&quot;</span> |git commit-tree e84b99 <span class="c">#新建一个快照，并把树e84b99添加到里面</span>
</span><span class='line'>d5cb71ea0e9c6a2c6b198bd5e44b80bd72aac806
</span><span class='line'><span class="nv">$ </span><span class="nb">find</span> .git/objects -type f | sort <span class="c">#我们现在有了一个文件，一棵树，还有一个快照</span>
</span><span class='line'>.git/objects/c0/ee9ab00ab41be0d401f00f7a4aaf2e478f9f1e
</span><span class='line'>.git/objects/d5/cb71ea0e9c6a2c6b198bd5e44b80bd72aac806
</span><span class='line'>.git/objects/e8/4b991fd55acf5eb290a11c0ae4149ce4ffc8dd
</span></code></pre></td></tr></table></div></figure>


<p>如果这个快照是有parent的，也就是说在这个快照之前，已经创建过一个快照，他们在同一条分支（branch）上。那你可以指定<code>-p 选项</code>来指定parent。</p>

<p>我们把<code>master分支头（the head of master branch）</code>指向到<code>目前的快照（current commit）</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> d5cb71ea0e9c6a2c6b198bd5e44b80bd72aac806 &gt; .git/refs/heads/master
</span></code></pre></td></tr></table></div></figure>


<p>或者用更加安全的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> update-ref ref/heads/master d5cb71
</span></code></pre></td></tr></table></div></figure>


<p>我们再把<code>HEAD</code>指向到master分支头（这一步在我的电脑上，<code>git init</code>的时候他已经帮我完成了）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> symbolic-ref HEAD refs/heads/master
</span></code></pre></td></tr></table></div></figure>


<p>到目前为止，我们已经成功手动完成了一次<code>git commit</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> log
</span><span class='line'>commit d5cb71ea0e9c6a2c6b198bd5e44b80bd72aac806
</span><span class='line'>Author: DY.Feng &lt;yyfeng88625@gmail.com&gt;
</span><span class='line'>Date:   Sat Aug 18 03:50:32 2012 +0800
</span><span class='line'>
</span><span class='line'>    add a.txt
</span></code></pre></td></tr></table></div></figure>


<p>如果我们没有把master分支头指向到<code>目前的快照</code>，或者快照沒有成为别人的parent，简单一句就是<code>孤立的快照</code>，不能被正常访问到的。那么他就有可能被Git的垃圾回收程序（<code>git gc</code>，他不仅回收垃圾，貌似还会压缩）删除。</p>

<h3>tag对象</h3>

<p>标签（tag）跟我们平时的标签贴纸用途非常相似，你可以把一个标签贴到一个对象上（例如commit对象，甚至是tag对象），用来标记这个对象的用途。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">rm</span> -rf .git <span class="c">#我们把现有的.git删除，重新建立一个干净的git</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> init
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> add test.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> ls-files --stage
</span><span class='line'>100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0       test.txt
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> tag <span class="s1">&#39;my_file_test.txt&#39;</span> e69de29 <span class="c">#给文件test.txt打个标签，标签名称不能有空格</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> tag
</span><span class='line'>my_file_test.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">cat</span> .git/refs/tags/my_file_test.txt <span class="c">#可以看到.git/refs/tags/目录下储存了一个标签，标签内容就是文件的SHA1值</span>
</span><span class='line'>e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
</span><span class='line'><span class="nv">$ </span><span class="nb">find</span> .git/objects -type f |sort <span class="c">#这个时候tag没有储存到objects目录下，也就是说他现在不是对象</span>
</span><span class='line'>.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#我们再新建一个文件</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Today,I have many many homework&quot;</span> &gt; homework.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> add homework.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> ls-files --stage
</span><span class='line'>100644 36821547a08783ec0779dfa89d9f714196402dc6 0       homework.txt
</span><span class='line'>100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0       test.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> tag -m <span class="s2">&quot;This is my homework&quot;</span> v1.0  3682154 <span class="c">#homework.txt贴上标签，这次加上标签描述</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> tag
</span><span class='line'>my_file_test.txt
</span><span class='line'>v1.0
</span><span class='line'><span class="nv">$ </span><span class="nb">cat</span> .git/refs/tags/v1.0  <span class="c">#这次看到他指向的并不是homework.txt文件</span>
</span><span class='line'>d1e1a5c0a8c01ac604c87e51d583131d7f9a3ebf
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file -t d1e1a5c <span class="c">#原来这次指向的是一个标签（tag）</span>
</span><span class='line'>tag
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file tag d1e1a5c <span class="c">#让我们来看看标签里面究竟装了什么</span>
</span><span class='line'>object 36821547a08783ec0779dfa89d9f714196402dc6
</span><span class='line'>type blob
</span><span class='line'>tag v1.0
</span><span class='line'>tagger DY.Feng &lt;yyfeng88625@gmail.com&gt; 1345259919 +0800
</span><span class='line'>
</span><span class='line'>This is my homework
</span><span class='line'><span class="nv">$ </span><span class="nb">find</span> .git/objects -type f |sort <span class="c">#这里可以看到这时候的标签（tag）是一个对象了</span>
</span><span class='line'>.git/objects/36/821547a08783ec0779dfa89d9f714196402dc6
</span><span class='line'>.git/objects/d1/e1a5c0a8c01ac604c87e51d583131d7f9a3ebf
</span><span class='line'>.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
</span><span class='line'>
</span><span class='line'><span class="c">#从上面的试验可以看到，tag不一定是基本对象。</span>
</span><span class='line'>
</span><span class='line'><span class="c">#tag也可以贴到tag对象上</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> tag -m <span class="s2">&quot;This is the tag of tag&quot;</span> v2.0 d1e1a5
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> tag
</span><span class='line'>my_file_test.txt
</span><span class='line'>v1.0
</span><span class='line'>v2.0
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file -t v2.0
</span><span class='line'>tag
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file tag v2.0 <span class="c">#不一定要用SHA1值，用引用就可以了。</span>
</span><span class='line'>object d1e1a5c0a8c01ac604c87e51d583131d7f9a3ebf
</span><span class='line'>type tag
</span><span class='line'>tag v2.0
</span><span class='line'>tagger DY.Feng &lt;yyfeng88625@gmail.com&gt; 1345260572 +0800
</span><span class='line'>
</span><span class='line'>This is the tag of tag
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>究竟我们上面的所有动作，Git都是怎么储存的？让我们看看他都储存了什么文件吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">rm</span> -rf .git <span class="c">#我们把现有的.git删除，重新建立一个干净的git</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> init
</span><span class='line'><span class="nv">$ </span><span class="nb">tree</span> .
</span><span class='line'>.
</span><span class='line'>├── bb
</span><span class='line'>│   └── a.txt
</span><span class='line'>└── test.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> commit -m <span class="s2">&quot;add all&quot;</span> -a <span class="c">#添加并提交所有的文件到git</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">find</span> .git/objects -type f | sort
</span><span class='line'>.git/objects/45/893175c9b60bdd4727c2a51ced8bae8a9c213f
</span><span class='line'>.git/objects/5b/e1b8923c561189f1fcfc5bcf2d2fe0b7684e76
</span><span class='line'>.git/objects/63/008ae88b4446dfc43b47f18aee5b427203b255
</span><span class='line'>.git/objects/65/a457425a679cbe9adf0d2741785d3ceabb44a7
</span><span class='line'>.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
</span></code></pre></td></tr></table></div></figure>


<p>从上面我们可以看到，现在有两个文件，两个目录（根目录和bb目录），一个快照（commit）。</p>

<p>这个就是我们的快照（commit），可以看到快照里记录了根目录树。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file -t 45893175c9b60bdd4727c2a51ced8bae8a9c213f
</span><span class='line'>commit
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file commit 45893175c9b60bdd4727c2a51ced8bae8a9c213f
</span><span class='line'>tree 5be1b8923c561189f1fcfc5bcf2d2fe0b7684e76
</span><span class='line'>author DY.Feng &lt;yyfeng88625@gmail.com&gt; 1345226467 +0800
</span><span class='line'>committer DY.Feng &lt;yyfeng88625@gmail.com&gt; 1345226467 +0800
</span><span class='line'>
</span><span class='line'>add all
</span></code></pre></td></tr></table></div></figure>


<p>查看根目录树，可以看到他里面包含了<code>test.txt文件</code>和<code>bb目录</code>的SHA1值，就像一个指针一样指向他们。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file -t 5be1b8923c561189f1fcfc5bcf2d2fe0b7684e76
</span><span class='line'>tree
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> ls-tree  5be1b8923c561189f1fcfc5bcf2d2fe0b7684e76
</span><span class='line'>040000 tree 65a457425a679cbe9adf0d2741785d3ceabb44a7    bb
</span><span class='line'>100644 blob 63008ae88b4446dfc43b47f18aee5b427203b255    test.txt
</span></code></pre></td></tr></table></div></figure>


<p>查看<code>test.txt</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file -t 63008ae88b4446dfc43b47f18aee5b427203b255
</span><span class='line'>blob
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file blob 63008ae88b4446dfc43b47f18aee5b427203b255
</span><span class='line'>Hello,Git!
</span></code></pre></td></tr></table></div></figure>


<p>这个是<code>bb目录</code>树，里面只有一个文件<code>a.txt</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file -t 65a457425a679cbe9adf0d2741785d3ceabb44a7
</span><span class='line'>tree
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> ls-tree 65a457425a679cbe9adf0d2741785d3ceabb44a7
</span><span class='line'>100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    a.txt
</span></code></pre></td></tr></table></div></figure>


<p>这个是<code>bb目录</code>里面的<code>a.txt</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> cat-file -t e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
</span><span class='line'>blob
</span></code></pre></td></tr></table></div></figure>


<p>一共增加了5个文件。</p>

<p>这个时候我们改改<code>bb/a.txt</code>文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;Good&#39;</span> &gt;bb/a.txt
</span></code></pre></td></tr></table></div></figure>


<p>让Git跟踪<code>bb/a.txt</code>文件。你会看到里面会新增了一个文件，他就是新修改的<code>bb/a.txt</code>文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> add .
</span><span class='line'><span class="nv">$ </span><span class="nb">find</span> .git/objects -type f | sort
</span><span class='line'>.git/objects/45/893175c9b60bdd4727c2a51ced8bae8a9c213f
</span><span class='line'>.git/objects/5b/e1b8923c561189f1fcfc5bcf2d2fe0b7684e76
</span><span class='line'>.git/objects/63/008ae88b4446dfc43b47f18aee5b427203b255
</span><span class='line'>.git/objects/65/a457425a679cbe9adf0d2741785d3ceabb44a7
</span><span class='line'>.git/objects/cd/9dd73b78cf79e797c97b8fd5d8b92e28d4437f
</span><span class='line'>.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
</span></code></pre></td></tr></table></div></figure>


<p>即使我们现在用<code>git checkout</code>和<code>git reset</code>，新增加的那个文件也不会消失，虽然我们现在无法通过正常的途径来获取他。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> checkout HEAD
</span><span class='line'>M       bb/a.txt <span class="nv">$ </span><span class="nb">find</span> .git/objects -type f | sort
</span><span class='line'>.git/objects/45/893175c9b60bdd4727c2a51ced8bae8a9c213f
</span><span class='line'>.git/objects/5b/e1b8923c561189f1fcfc5bcf2d2fe0b7684e76
</span><span class='line'>.git/objects/63/008ae88b4446dfc43b47f18aee5b427203b255
</span><span class='line'>.git/objects/65/a457425a679cbe9adf0d2741785d3ceabb44a7
</span><span class='line'>.git/objects/cd/9dd73b78cf79e797c97b8fd5d8b92e28d4437f
</span><span class='line'>.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> reset --hard HEAD
</span><span class='line'>HEAD is now at 4589317 add all
</span><span class='line'><span class="nv">$ </span><span class="nb">find</span> .git/objects -type f | sort
</span><span class='line'>.git/objects/45/893175c9b60bdd4727c2a51ced8bae8a9c213f
</span><span class='line'>.git/objects/5b/e1b8923c561189f1fcfc5bcf2d2fe0b7684e76
</span><span class='line'>.git/objects/63/008ae88b4446dfc43b47f18aee5b427203b255
</span><span class='line'>.git/objects/65/a457425a679cbe9adf0d2741785d3ceabb44a7
</span><span class='line'>.git/objects/cd/9dd73b78cf79e797c97b8fd5d8b92e28d4437f
</span><span class='line'>.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
</span></code></pre></td></tr></table></div></figure>


<p>从这里我们就可以看出Git与其他的版本管理系统有什么区别。最大的区别就是Git记录的其实是每个文件的快照，但他不管这个快照是什么时候在什么目录被什么人建立的，因为这些他都可以通过<code>tree对象</code>和<code>commit对象</code>来推算出来。</p>

<h2>引用（ref）</h2>

<p>其实上面我们已经看过了很多个引用，或者叫指向。像HEAD，master，tag这些都是引用。所有的引用都放在<code>.git/refs/</code>里。通过引用，我们可以很方便地调用Git的基本对象。</p>

<h2>关于分支（branch）</h2>

<p>在Git系统里面，分支（branch）並不是基本类型，而是某个<code>快照（commit）</code>的引用。这个非常容易理解，要知道，我们的<code>快照（commit）</code>是一个链式结构，从最新的那个快照起，我们可以完整地追溯到他的所有父快照。</p>

<h1>Local本地使用</h1>

<p>这章的题目叫<code>Local本地</code>，是因为这一章的操作你都不需要连接互联网就能完成。这也是分布式版本管理的一个特点，每个人都是一个<code>完整</code>的版本（相对自己而言），你可以在你的本机上检出，提交，删除&#8230;</p>

<h2>初始化</h2>

<h3>设置全局变量</h3>

<p>名字和Email会作为Github显示的依据。你不设置，没问题，只是Github的提交里显示不出你的用户名而已。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global user.name <span class="s2">&quot;DY.Feng&quot;</span>
</span><span class='line'>git config --global user.email <span class="s2">&quot;yyfeng88625&quot;</span>
</span><span class='line'>git config --global color.ui <span class="s2">&quot;always&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>初始化新版本库</h3>

<p>初始化，只会在根目录下创建一个<code>.git</code>的文件夹。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init
</span></code></pre></td></tr></table></div></figure>


<p>初始化后的目录结构</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">tree</span> .git/
</span><span class='line'>.git/
</span><span class='line'>├── branches
</span><span class='line'>├── config
</span><span class='line'>├── description
</span><span class='line'>├── HEAD
</span><span class='line'>├── hooks
</span><span class='line'>│   ├── applypatch-msg.sample
</span><span class='line'>│   ├── commit-msg.sample
</span><span class='line'>│   ├── post-update.sample
</span><span class='line'>│   ├── pre-applypatch.sample
</span><span class='line'>│   ├── pre-commit.sample
</span><span class='line'>│   ├── prepare-commit-msg.sample
</span><span class='line'>│   ├── pre-rebase.sample
</span><span class='line'>│   └── update.sample
</span><span class='line'>├── info
</span><span class='line'>│   └── exclude
</span><span class='line'>├── objects
</span><span class='line'>│   ├── info
</span><span class='line'>│   └── pack
</span><span class='line'>└── refs
</span><span class='line'>    ├── heads
</span><span class='line'>    └── tags
</span></code></pre></td></tr></table></div></figure>


<h3>设置忽略文件</h3>

<ul>
<li>新建<code>.gitignore</code>文件并提交。</li>
<li>修改<code>.git/info/exclude</code>文件，支持正则表达式，例如<code>*.[oa]</code>等价于 <code>*.o</code> 和 <code>*.a</code>。这个方法只适用于你个人。</li>
</ul>


<h2>日常操作</h2>

<h3>添加文件到缓存区</h3>

<ul>
<li>添加个别文件。<code>git add somefile1 somefile2</code></li>
<li>添加本目录所有txt文件。<code>git add *.txt</code></li>
<li><code>递归</code>添加所有文件，不包括空目录。<code>git add .</code></li>
</ul>


<h3>从缓存区删除文件</h3>

<p>用法跟rm一样，<code>git rm --cached</code>。</p>

<ul>
<li>删除单个文件。<code>git rm --cached somefile</code></li>
<li>递归删除。<code>git rm --cached -r .</code></li>
</ul>


<h3>查看当前缓存区的情况</h3>

<p>当前缓存区的情况是<code>注释</code>掉的，这也正常嘛，还没正式提交。<code>git status</code>是查看当前缓存区（index）和HEAD之间的差异。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> status
</span></code></pre></td></tr></table></div></figure>


<p>例如下面的例子就是说明:当前缓存区比HEAD要多一个文件<code>c.txt</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> status
</span><span class='line'><span class="c"># On branch master</span>
</span><span class='line'><span class="c"># Changes to be committed:</span>
</span><span class='line'><span class="c">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#       new file:   c.txt</span>
</span><span class='line'><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<h3>从HEAD签出文件</h3>

<p><code>签出</code>这个词在用惯svn的童鞋眼中肯定很熟悉，可你得注意，这里的签出是指从<code>本地仓库</code>签出而已，不是签出远程的服务器。</p>

<p>从HEAD签出文件意味着把HEAD时的状态的文件复制出来，再次强调<code>HEAD</code>指的是最后一次提交（git commit）的状态。如果当前文件已经加入到了<code>缓存区</code>，这个动作也会把他从缓存区删除。但<em>不建议</em>把这个作为<code>撤销加入缓存区</code>的方法，因为签出会把文件也变回最后一次提交的状态，如果你已经修改过文件，那你的修改就全无了。如果你要撤销文件加入缓存区，请用<code>git rm --cached</code>。</p>

<ul>
<li>签出所有文件。<code>git checkout HEAD .</code></li>
<li>签出所有txt文件。<code>git checkout HEAD *.txt</code></li>
<li>签出个别文件。<code>git checkout HEAD somefile1 somefile2</code></li>
</ul>


<p>在这里面，我们不一定要用<code>HEAD</code>，就像我一开始说的，其实HEAD只是代表了一个32位的sha标记而已，指向最新的那次修改。<code>git log</code>就能看到本地所有的提交，每次提交都有一个32位的标记，我们的HEAD就是指向最新的那个标记。既然我们知道了原理，那我们就可以在任意一次<code>commit</code>里签出我们想要的文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span> log <span class="c">#找到我们要签出的那次`commit`标记是多少</span>
</span><span class='line'>commit 341c1e6921b61468ffd38ac423d7cf1120d7b086
</span><span class='line'>Author: DY.Feng &lt;yyfeng88625@gmail.com&gt;
</span><span class='line'>Date:   Mon Aug 13 05:22:11 2012 +0800
</span><span class='line'>
</span><span class='line'>    mod b to 1
</span><span class='line'>
</span><span class='line'>commit 0b5f275b20e40b51cca7bd64b2d8e50693c6660b
</span><span class='line'>Author: DY.Feng &lt;yyfeng88625@gmail.com&gt;
</span><span class='line'>Date:   Mon Aug 13 05:21:24 2012 +0800
</span><span class='line'>
</span><span class='line'>    add b,mod a to 1
</span><span class='line'>
</span><span class='line'>commit f0b121cf65b11d6b58b30531eb2415ddf0cbe451
</span><span class='line'>Author: DY.Feng &lt;yyfeng88625@gmail.com&gt;
</span><span class='line'>Date:   Mon Aug 13 04:56:14 2012 +0800
</span><span class='line'>
</span><span class='line'>    rm -
</span><span class='line'>
</span><span class='line'>commit 5f1d4283f52a825ca706b8dd039afc0dee3aa1b2
</span><span class='line'>Author: DY.Feng &lt;yyfeng88625@gmail.com&gt;
</span><span class='line'>Date:   Mon Aug 13 04:23:06 2012 +0800
</span><span class='line'>
</span><span class='line'>    first
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> checkout 0b5f275b20e40b51cca7bd64b2d8e50693c6660b b.txt <span class="c">#签出倒数第二次提交时，我们的b.txt</span>
</span></code></pre></td></tr></table></div></figure>


<h3>提交修改到本地仓库</h3>

<ul>
<li>提交之前<code>git add</code>过的。<code>git commit -m "提交信息"</code></li>
<li>提交所有修改，省略<code>git add</code>步骤。<code>git commit -m "提交信息" -a</code></li>
<li>提交单个文件，注意此文件必须是<code>git add</code>之后的。<code>git commit -m "提交信息" somefile</code></li>
<li>增补提交，复用HEAD留言（修改小错误，而不增加提交记录，掩盖自己的小马虎）。<code>git commit -C HEAD -a --amend</code></li>
</ul>


<p><em>注意：</em>修改过的文件在<code>git commit</code>之前也必须<code>git add</code>一次。</p>

<h3>撤销本地仓库的修改</h3>

<p>其实准确的来说不是撤销修改，而是把世界恢复到某个提交的时间点。</p>

<h1>Remote远程相关使用</h1>

<p>简单的说，这一章你需要连接网络才能完成。</p>

<h2>初始化</h2>

<h3>克隆版本库</h3>

<p>克隆版本库这个是我们最常用<code>获取代码</code>的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:DYFeng/test_on_github.git
</span></code></pre></td></tr></table></div></figure>


<p>克隆后你会发现Github已经帮你填写好几样东西：远程<code>origin</code>配置和分支<code>master</code>配置。origin其实是一个<code>引用</code>，远程仓库remote的引用。而分支配置<code>[branch "master"]</code>里则写明了：我的远程端是<code>origin</code>。其实这个<code>origin</code>也可以自己改一个名字，origin这个只是大众默认名字而已。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">git</span>@github.com:DYFeng/test_on_github.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> test_on_github
</span><span class='line'><span class="nv">$ </span><span class="nb">cat</span> .git/config
</span><span class='line'><span class="o">[</span>core<span class="o">]</span>
</span><span class='line'>    <span class="nv">repositoryformatversion</span> <span class="o">=</span> 0
</span><span class='line'>    <span class="nv">filemode</span> <span class="o">=</span> true
</span><span class='line'>    <span class="nv">bare</span> <span class="o">=</span> false
</span><span class='line'>    <span class="nv">logallrefupdates</span> <span class="o">=</span> true
</span><span class='line'><span class="o">[</span>remote <span class="s2">&quot;origin&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="nv">fetch</span> <span class="o">=</span> +refs/heads/*:refs/remotes/origin/*
</span><span class='line'>    <span class="nv">url</span> <span class="o">=</span> git@github.com:DYFeng/test_on_github.git
</span><span class='line'><span class="o">[</span>branch <span class="s2">&quot;master&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="nv">remote</span> <span class="o">=</span> origin
</span><span class='line'>    <span class="nv">merge</span> <span class="o">=</span> refs/heads/master
</span></code></pre></td></tr></table></div></figure>


<h3>手动添加删除远程仓库</h3>

<p>其实就是生成上面<code>[remote "origin"]</code>小节的东西。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add origin git@github.com:DYFeng/test_on_github.git
</span></code></pre></td></tr></table></div></figure>


<h3>删除引用和相关分支</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote rm origin
</span></code></pre></td></tr></table></div></figure>


<h3>创建一个空本地仓库</h3>

<p>没有远程配置也没有分支配置，而且他把<code>.git</code>里面的文件都新建到外面了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init --bare
</span><span class='line'><span class="nv">$ </span><span class="nb">cat</span> config
</span><span class='line'><span class="o">[</span>core<span class="o">]</span>
</span><span class='line'>    <span class="nv">repositoryformatversion</span> <span class="o">=</span> 0
</span><span class='line'>    <span class="nv">filemode</span> <span class="o">=</span> true
</span><span class='line'>    <span class="nv">bare</span> <span class="o">=</span> true
</span></code></pre></td></tr></table></div></figure>


<h1>小技巧</h1>

<p>查看<code>引用</code>代表的SHA1值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$git</span> rev-parse <span class="o">(</span>HEAD|master|...<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>相关术语以及本文翻译</h1>

<p>个人英语水平不高，很多名词我是按照自己的理解来翻译的，所以相关术语我都会标上英文原词，免得误人子弟。下面是本文出现过的术语以及对应的英文原词。</p>

<ul>
<li><p>本地文件/工作目录（working tree）。他持有<code>实际文件</code>。</p></li>
<li><p>引索（index/stage）。引索保存着你文件的一个快照，下面我们用例子来说明：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">rm</span> -rf * .git/
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> init <span class="c">#清空工作目录，建立一个空的git</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;Hello&#39;</span> &gt; test.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> add test.txt <span class="c">#添加一个文件快照</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">find</span> .git/objects -type f |sort
</span><span class='line'>.git/objects/e9/65047ad7c57865823c7d992b1d046ea66edf78
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39; World&#39;</span> &gt;&gt; test.txt
</span><span class='line'><span class="nv">$ </span><span class="nb">git</span> add test.txt <span class="c">#把文件修改后，再添加一个文件快照</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">find</span> .git/objects -type f |sort <span class="c">#现在可以看到文件快照变成两个了</span>
</span><span class='line'>.git/objects/0e/b080b993dbf2994de6a9b92e2c375201463df9
</span><span class='line'>.git/objects/e9/65047ad7c57865823c7d992b1d046ea66edf78
</span></code></pre></td></tr></table></div></figure>


<p>这里还要澄清一下，很多教程都叫引索（index/stage）为<code>缓存区</code>，其实是不准确的说法。</p>

<!-- 例如`git add`就是保存到缓存区。缓冲区文件是`.git/index`。 -->


<ul>
<li><p>本地仓库（repository）。仓库位于工作目录下的<code>.git</code>目录，本地仓库储存的实际文件在<code>.git/objects</code>目录。仓库里面包含了：</p>

<ul>
<li>你所有的提交（commits）</li>
<li>定义了<code>HEAD</code></li>
<li>包含了所有分支（branche）</li>
<li>包含了所有的标签（tag）</li>
<li>你这个仓库的配置，远程服务端地址等。</li>
</ul>
</li>
<li><p>HEAD。</p>

<p><em>HEAD不是一个实际的仓库！！</em>所谓的HEAD，其实就像一个<code>指针</code>，指向你最近一次快照（commit）。</p>

<p>例如<code>cat .git/HEAD</code>后得到<code>ref: refs/heads/master</code>这么一串东西，其实他的意思就是现在的<code>HEAD</code>指向<code>.git/refs/heads/master</code>文件。再跟踪下去我们就会发现<code>.git/refs/heads/master</code>里面包含了一串32位的sha码。没错，这就是真正的提交结果，也就是<code>git commit</code>之后git给回你的一个标记。这个标记跟你<code>git log</code>第一条commit的标记是一样的。</p>

<p>什么时候这个指针会移动？</p>

<ul>
<li>你<code>git chekcout</code>的时候</li>
<li>你<code>git commit</code>的时候</li>
</ul>
</li>
<li><p>提交/快照（commit）。这个<code>commit</code>我个人认为，他有两重含义。做动词的时候表示<code>提交</code>，例如<code>git commit</code>。做名词的时候表示<code>快照</code>，是Git的基本对象之一<code>commit对象</code>。例如<code>git log</code>时你会看到你之前很多次的提交，其实每一次提交都是一次对你工作目录的快照。</p></li>
<li><p>签出（checkout）。与<code>reset</code>的区别：</p></li>
<li><p>分支（branch）。分支这个对于了解svn的人来说应该很好理解。其实Git的分支只是快照（commit）的一个引用，或者说是一堆快照的引用。例如他定义了这一堆快照叫<code>branch of development</code>。</p></li>
<li><p>标签（tag）。标签这个就是一个快照（commit）的引用。跟<code>branch</code>相似，只不过他只能定义一个快照，而且他有自己的概要描述。</p></li>
<li><p>master。master就是主分支，只是一个约定俗成的名字而已，没有什么特殊。</p></li>
</ul>


<h1>后话</h1>

<p>虽然关于Git的使用有很多文章，但是没有一篇是全面而且解释清楚的，以致我还只是通晓几个Git的命令而已。有人觉得Git博大精深，其实不然，其实Git是简单的。就好比你吃一个苹果，你可以横着吃，可以竖着吃，你吃的方式可以有无限种，但没有人会去研究怎么吃苹果吧。只要你了解了本质，就会发现条条大路通罗马。</p>

<h1>参考文献</h1>

<p>在学习Git的过程中，看过的文献实在是太多了，下面只列出我浏览时间超过5分钟的。</p>

<ol>
<li>不错的一个<a href="http://blog.csdn.net/liuysheng/article/details/7191846">Git常用命令思维导图</a>，本文就是基于这个脉络来写的。</li>
<li>关于Git的方方面面（英文）。<a href="http://newartisans.com/2008/04/git-from-the-bottom-up/">原文地址</a> <a href="http://ftp.newartisans.com/pub/git.from.bottom.up.pdf">PDF下載</a></li>
<li><a href="http://guibin.iteye.com/blog/1013279">Git基础对象模型介绍</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为rake添加命令补全]]></title>
    <link href="http://www.dyfeng.org/2012/08/12/bash-completion-for-rake/"/>
    <updated>2012-08-12T00:32:00+08:00</updated>
    <id>http://www.dyfeng.org/2012/08/12/bash-completion-for-rake</id>
    <content type="html"><![CDATA[<p>为了用上Octopress，最近我没有少跟rake打交道。不过用起来始终有点不爽–命令补全没有了，没有make用得那么爽。虽然用<code>rake -T</code>可以列出所有的任务，但是始终没有一个Tab键补全方便。</p>

<p>幸亏觉得不方便的不止我一个人，Google了下，发现已经有人写出了基于bash-completion的<a href="http://turadg.aleahmad.net/2011/02/bash-completion-for-rake-tasks/">补全插件</a>，还带缓存的。</p>

<!-- more-->


<p>把下面的文件保存到<code>completions.d</code>目录（在ubuntu上是/etc/bash_completion.d）</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># bash completion for rake</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># some code from on Jonathan Palardy&#39;s http://technotales.wordpress.com/2009/09/18/rake-completion-cache/</span>
</span><span class='line'><span class="c"># and http://pastie.org/217324 found http://ragonrails.com/post/38905212/rake-bash-completion-ftw</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># For details and discussion</span>
</span><span class='line'><span class="c"># http://turadg.aleahmad.net/2011/02/bash-completion-for-rake-tasks/</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># INSTALL</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Place in your bash completions.d and/or source in your .bash_profile</span>
</span><span class='line'><span class="c"># If on a Mac with Homebrew, try &quot;brew install bash-completion&quot;</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># USAGE</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Type &#39;rake&#39; and hit tab twice to get completions.</span>
</span><span class='line'><span class="c"># To clear the cache, run rake_cache_clear() in your shell.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>_rake_cache_path<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c"># If in a Rails app, put the cache in the cache dir</span>
</span><span class='line'>  <span class="c"># so version control ignores it</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -e <span class="s1">&#39;tmp/cache&#39;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="nv">prefix</span><span class="o">=</span><span class="s1">&#39;tmp/cache/&#39;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>echo <span class="s2">&quot;${prefix}.rake_t_cache&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>rake_cache_store<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  rake --tasks --silent &gt; <span class="s2">&quot;$(_rake_cache_path)&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>rake_cache_clear<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  rm -f .rake_t_cache
</span><span class='line'>  rm -f tmp/cache/.rake_t_cache
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>export <span class="nv">COMP_WORDBREAKS</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDBREAKS</span><span class="p">/\:/</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>_rakecomplete<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c"># error if no Rakefile</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> ! -e Rakefile <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>echo <span class="s2">&quot;missing Rakefile&quot;</span>
</span><span class='line'>    <span class="k">return </span>1
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># build cache if missing</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> ! -e <span class="s2">&quot;$(_rake_cache_path)&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>rake_cache_store
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>local <span class="nv">tasks</span><span class="o">=</span><span class="sb">`</span>awk <span class="s1">&#39;{print $2}&#39;</span> <span class="s2">&quot;$(_rake_cache_path)&quot;</span><span class="sb">`</span>
</span><span class='line'>  <span class="nv">COMPREPLY</span><span class="o">=(</span><span class="k">$(</span>compgen -W <span class="s2">&quot;${tasks}&quot;</span> -- <span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[COMP_CWORD]</span><span class="k">})</span><span class="o">)</span>
</span><span class='line'>  <span class="k">return </span>0
</span><span class='line'><span class="o">}</span>
</span><span class='line'>complete -o default -o nospace -F _rakecomplete rake
</span></code></pre></td></tr></table></div></figure>


<p>在当前shell载入补全</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">source</span> /etc/bash_completion.d/rake
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Octopress as Github Blog on Ubuntu 12.04]]></title>
    <link href="http://www.dyfeng.org/2012/08/12/using-octopress-as-github-blog/"/>
    <updated>2012-08-12T00:00:00+08:00</updated>
    <id>http://www.dyfeng.org/2012/08/12/using-octopress-as-github-blog</id>
    <content type="html"><![CDATA[<p>本来我的Github blog是使用<code>Jekyll-Bootstrap</code>作为生成引擎。不过他是把文章发给Github解析的，由于Github出于安全考虑，限制ruby脚本的运行，这样就导致很多功能实现不了。这时候我发现了<code>Octopress</code>引擎，他把你的branch分成两个，一个master，负责放置静态的页面，一个是source，放置程序本身和Markdown日志。</p>

<!-- more -->


<h1>名词解释</h1>

<p>无论是<code>Jekyll-Bootstrap</code>还是<code>Octopress</code>，他们都用到了<code>ruby</code>写的后端<code>jekyll</code>，我对<code>ruby</code>基本上没有多少接触，看到N个<code>ruby</code>的名词更是晕了，在此记录下</p>

<ul>
<li><p>Gem
ruby的<code>easy_install</code>，用来安装各种库，是用<code>ruby</code>写的，全称叫<code>rubygems</code>。</p></li>
<li><p>Bundler
基于gem的更高级管理工具，bundler相对于gem就好比apt-get相对于aptitude。不过他不是单纯的下载安装，他会根据本目录的<code>Gemfile</code>文件，把你缺少的包给装上。</p></li>
<li><p>Rvm
<code>Ruby Version Manager</code>，用来安装各种版本的ruby，问题是ubuntu有apt-get，这个不大派上用场。</p></li>
<li><p>Rbenv
<code>Simple Ruby Version Management</code>，也是用来安装各种版本的<code>ruby</code>。</p></li>
<li><p>Rake
<code>Ruby Make</code>，顾名思义就是ruby写的make，他对应的Makefile是<code>Rakefile</code></p></li>
</ul>


<h1>安装Octopress</h1>

<h2>配置安装环境</h2>

<h3>安装ruby 1.9.3</h3>

<p>要安装<code>Octopress</code>，必须有<code>ruby 1.9.3</code>。因为我不喜欢用第三方软件来安装<code>ruby</code>，所以我是<a href="http://lenni.info/blog/2012/05/installing-ruby-1-9-3-on-ubuntu-12-04-precise-pengolin/" title="Installing Ruby on Ubuntu 12.04">用apt-get的方式安装Ruby</a>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install ruby1.9.1 ruby1.9.1-dev <span class="se">\</span>
</span><span class='line'>rubygems1.9.1 irb1.9.1 ri1.9.1 rdoc1.9.1 <span class="se">\</span>
</span><span class='line'>build-essential libopenssl-ruby1.9.1 libssl-dev zlib1g-dev
</span><span class='line'>
</span><span class='line'>sudo update-alternatives --install /usr/bin/ruby ruby /usr/bin/ruby1.9.1 400 <span class="se">\</span>
</span><span class='line'>    --slave   /usr/share/man/man1/ruby.1.gz ruby.1.gz <span class="se">\</span>
</span><span class='line'>    /usr/share/man/man1/ruby1.9.1.1.gz <span class="se">\</span>
</span><span class='line'>    --slave   /usr/bin/ri ri /usr/bin/ri1.9.1 <span class="se">\</span>
</span><span class='line'>    --slave   /usr/bin/irb irb /usr/bin/irb1.9.1 <span class="se">\</span>
</span><span class='line'>    --slave   /usr/bin/rdoc rdoc /usr/bin/rdoc1.9.1
</span><span class='line'>
</span><span class='line'>sudo update-alternatives --config ruby
</span><span class='line'>sudo update-alternatives --config gem
</span><span class='line'>
</span><span class='line'>ruby --version
</span></code></pre></td></tr></table></div></figure>


<p>这样子，我们就不需要用到<code>rvm</code>或者<code>rbenv</code>这些东西了。要注意一点的是，虽然看上去我们装的是<code>1.9.1</code>，其实他是<code>Ruby 1.9.3-p0</code>。为什么他又叫<code>1.9.1</code>呢？因为这个<code>1.9.1</code>只是一个<code>ABI</code>版本号而已。<code>ubuntu</code>有一个<code>ruby1.9.3</code>的虚包，其实也是指向<code>1.9.1</code>的。</p>

<h3>下载安装Octopress</h3>

<p>下载Octopress，再次确定<code>ruby</code>版本</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress    <span class="c"># If you use RVM, You&#39;ll be asked if you trust the .rvmrc file (say yes).</span>
</span><span class='line'>ruby --version  <span class="c"># Should report Ruby 1.9.3</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装<code>bundler</code>并使用<code>bundler</code>安装依赖</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>安装默认Octopress主题</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure>


<h2>部署到Github</h2>

<p>其实部署Github非常简单。</p>

<p>交互式输入你的Github仓库地址（<code>git@github.com:username/username.github.com.git</code>，把<code>username</code>替换成你的用户名）。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>把你的域名提交给Github。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>echo <span class="s1">&#39;www.dyfeng.org&#39;</span> &gt; source/CNAME
</span></code></pre></td></tr></table></div></figure>


<p>在<code>public</code>目录生成页面。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span></code></pre></td></tr></table></div></figure>


<p>将<code>public</code>里的静态页面复制到<code>_deploy</code>目录,上传到master branch</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>上传程序本身到source branch</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;init&#39;</span>
</span><span class='line'>git push origin source
</span></code></pre></td></tr></table></div></figure>


<p>这个时候，如果一切正常，你应该可以看到你的<code>Octopress Blog</code>了。</p>

<h2>本地预览</h2>

<p>打开<a href="http://localhost:4000">http://localhost:4000</a>即可看到效果。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<h1>配置Octopress</h1>

<p>看看你的<code>_config.yml</code>文件，blog的基本设置都在里面了，包括第三方插件的设置。</p>

<p>在这里我们有<a href="https://github.com/imathis/octopress/wiki/List-Of-Octopress-Themes">一箩筐主题</a>供君选择，虽然能落入我法眼的真不多…我选择了<a href="http://mrzhang.me/">张神仙</a>童鞋的<a href="http://mrzhang.me/blog/blog-equals-github-plus-octopress.html">主题</a>，先用着先，以后再慢慢改。下面在默认主题的前提下安装他主题的方法。</p>

<h2>更改Octopress主题</h2>

<p>先下载一份</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/jsw0528/octopress.git shenxian
</span><span class='line'>cd shenxian
</span><span class='line'>bundle install
</span><span class='line'>git submodule init
</span><span class='line'>git submodule update
</span></code></pre></td></tr></table></div></figure>


<p>他的主题主要是新增加了<code>两个插件</code>，和一个<code>主题文件夹</code></p>

<ul>
<li>plugins/sh_js.rb</li>
<li>plugins/tag_generator.rb</li>
<li>.theme/blog</li>
</ul>


<p>复制到我们的Octopress里去</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp plugins/sh_js.rb ../octopress/plugins/
</span><span class='line'>cp plugins/tag_generator.rb ../octopress/plugins/
</span><span class='line'>cp -R .theme/blog ../octopress/.theme/
</span></code></pre></td></tr></table></div></figure>


<p>他的<code>tag_generator.rb</code>插件似乎在我的机子上有点问题，出错信息为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tag_generator.rb:55:in `join': can't convert nil into String (TypeError)
</span><span class='line'>from /media/DOCUMENT/github/octopress/plugins/tag_generator.rb:55:in `block in write_tag_indexes'
</span><span class='line'>from /media/DOCUMENT/github/octopress/plugins/tag_generator.rb:54:in `each'
</span><span class='line'>from /media/DOCUMENT/github/octopress/plugins/tag_generator.rb:54:in `write_tag_indexes'
</span><span class='line'>from /media/DOCUMENT/github/octopress/plugins/tag_generator.rb:73:in `generate'
</span><span class='line'>from /var/lib/gems/1.9.1/gems/jekyll-0.11.2/lib/jekyll/site.rb:184:in `block in generate'
</span><span class='line'>from /var/lib/gems/1.9.1/gems/jekyll-0.11.2/lib/jekyll/site.rb:183:in `each'
</span><span class='line'>from /var/lib/gems/1.9.1/gems/jekyll-0.11.2/lib/jekyll/site.rb:183:in `generate'
</span><span class='line'>from /var/lib/gems/1.9.1/gems/jekyll-0.11.2/lib/jekyll/site.rb:39:in `process'
</span><span class='line'>from /var/lib/gems/1.9.1/gems/jekyll-0.11.2/bin/jekyll:250:in `&lt;top (required)="">'
</span><span class='line'>from /usr/local/bin/jekyll:19:in `load'
</span><span class='line'>from /usr/local/bin/jekyll:19:in `&lt;main>'</span></code></pre></td></tr></table></div></figure>


<p>解决方法是将<code>tag_generator.rb</code>55行</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">write_tag_index</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;tag_dir&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">tag</span><span class="o">.</span><span class="n">to_url</span><span class="o">.</span><span class="n">downcase</span><span class="p">),</span> <span class="n">tag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>改为</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">write_tag_index</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;tag_dir&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">tag</span><span class="o">.</span><span class="n">to_url</span><span class="o">.</span><span class="n">downcase</span><span class="p">),</span> <span class="n">tag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>切换主题</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cd ../octopress/
</span><span class='line'>rake install<span class="o">[</span><span class="s1">&#39;blog&#39;</span><span class="o">]</span>
</span><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>现在打开<a href="http://localhost:4000">http://localhost:4000</a>应该可以看到效果了。</p>

<h1>使用Octopress</h1>

<p>新建文章，很贴心的一点是中文的题目他会转换为拼音，一些特殊符号他都会帮你转成相应的英文。不过为了更好地SEO，最好还是起一个有意义的题目，而不是一堆拼音。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cd octopress
</span><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;The Title of Your Article&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post on Github]]></title>
    <link href="http://www.dyfeng.org/2012/08/11/first-post-on-github/"/>
    <updated>2012-08-11T00:00:00+08:00</updated>
    <id>http://www.dyfeng.org/2012/08/11/first-post-on-github</id>
    <content type="html"><![CDATA[<p>Included file &#8216;JB/setup&#8217; not found in _includes directory</p>

<p>终于出炉了！！这是我第一篇用github做blog的文章！！小生愚钝，在Win7下弄了4个小时才弄出来。遇到了cygwin和gem不兼容、gem源被墙、jekyll在Win7下各种奇怪的症状&#8230;得感叹下在Windows下生活的孩子不容易吖。</p>

<p>因为在Windows下操作，入乡随俗地下载了个Github的Windows客户端，那界面很炫，很有Win8 feel，难道这就是传说中的WinForm。可惜就是push的时候太慢了点，感觉要比命令行下要慢半拍。而且他在界面里不叫push，叫sync，这个名词更容易让人理解。</p>

<p>下面是各种华丽的Markdown测试</p>

<pre class="prettyprint">
require 'redcarpet'
markdown = Redcarpet.new("Hello World!")
puts markdown.to_html
</pre>




<pre class="prettyprint">
##大标题
###小标题
####小小标题
#####小小小标题
######你还能再小点不
#######其实我能一直地小，只是css没有定义到了
</pre>


<h2>大标题</h2>

<h3>小标题</h3>

<h4>小小标题</h4>

<h5>小小小标题</h5>

<h6>你还能再小点不</h6>

<h6>#其实我能一直地小，只是css没有定义到了</h6>

<pre class="prettyprint">
*强调一下*

**再强调一下**

***我次次强调我容易吗我***
</pre>


<p><em>强调一下</em></p>

<p><strong>再强调一下</strong></p>

<p><strong><em>我次次强调我容易吗我</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[减少xampp内存占用]]></title>
    <link href="http://www.dyfeng.org/2012/08/11/decrease-threads-with-xampp/"/>
    <updated>2012-08-11T00:00:00+08:00</updated>
    <id>http://www.dyfeng.org/2012/08/11/decrease-threads-with-xampp</id>
    <content type="html"><![CDATA[<p>Included file &#8216;JB/setup&#8217; not found in _includes directory</p>

<p>最近有个改写moodle系统插件的项目，所以我又重操起php的老行当。moodle是一个非常不错的考试系统，多种题型，多种计分方式，唯一的缺点就是文档太少，非常的缺&#8230;开发人员列表里面也看到了好几个中国人的名字。</p>

<p>下载，放到htdocs，<code>sudo lampp start</code>，结果发现他竟然要求php5.3以上。我的php还是5.1的老版本，那没法，唯有下载个最新的xampp吧。一切还算顺利，除了xampp好像怪怪的。因为我改了配置文件后，再重启，他竟然好像没有反应，这个到现在还是个不解之谜。</p>

<p>在开发的过程中，我还发现电脑卡了很多，<code>ps -A|grep httpd</code>一看，哇的一刷。内存给我用了几百兆了，虽然我有4G也不是这样浪费的嘛，我只是开发而已，没有必要开这么线程。下面记录一下给xampp减少线程的方法。</p>

<!--more-->


<h1>减少xampp线程数，享受低碳生活</h1>

<h2>先看看Apache现在是在什么模式下工作</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/opt/lampp/bin/apachectl -lCompiled in modules:
</span><span class='line'>core.c
</span><span class='line'>prefork.c
</span><span class='line'>http_core.c
</span><span class='line'>mod_so.c
</span></code></pre></td></tr></table></div></figure>


<p>看到了吧，原来xampp的Apache默认是在<em>prefork</em>模式下跑的，那我们得相应修改prefox模式的进程数。</p>

<h2>修改Apache配置</h2>

<h3>修改httpd.conf</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">vim</span> etc/httpd.conf
</span></code></pre></td></tr></table></div></figure>


<p>找到<code>#Include etc/extra/httpd-mpm.conf</code>去掉注释，保存。</p>

<h3>修改httpd-mpm.conf</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">vim</span> etc/extra/httpd-mpm.conf
</span></code></pre></td></tr></table></div></figure>


<p>找到</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;IfModule mpm_prefork_module>
</span><span class='line'>    StartServers          2
</span><span class='line'>    MinSpareServers       2
</span><span class='line'>    MaxSpareServers      5
</span><span class='line'>    MaxClients          5
</span><span class='line'>    MaxRequestsPerChild   0
</span><span class='line'> &lt;/IfModule></span></code></pre></td></tr></table></div></figure>


<p>修改其中的参数，下面是这几个参数的详细解释：</p>

<p>Apache一开始会新建<em>StartServers</em>个子进程后，为了满足<em>MinSpareServers</em>设置的需要，创建一个进程，等待一秒钟，继续创建两个，再等待一秒钟，继续创建四个……如此按指数级增加创建的进程数，最多达到每秒32个，直到满足<em>MinSpareServers</em>设置的值为止。</p>

<p>这种模式可以不必在请求到来时再产生新的进程，从而减小了系统开销以增加性能。<em>MaxSpareServers</em>设置了最大的空闲进程数，如果空闲进程数大于这个值，Apache会自动kill掉一些多余进程。这个值不要设得过大，但如果设的值比MinSpareServers小，Apache会自动把其调整为 MinSpareServers+1。</p>

<p>如果站点负载较大，可考虑同时加大<em>MinSpareServers</em>和<em>MaxSpareServers</em>。 <em>MaxRequestsPerChild</em>设置的是每个子进程可处理的请求数。每个子进程在处理了<em>MaxRequestsPerChild</em>个请求后将自动销毁。0意味着无限，即子进程永不销毁。虽然缺省设为0可以使每个子进程处理更多的请求，但如果设成非零值也有两点重要的好处：</p>

<blockquote><ol>
<li>可防止意外的内存泄漏。</li>
<li>在服务器负载下降的时侯会自动减少子进程数。</li>
</ol>
</blockquote>

<p>因此，可根据服务器的负载来调整这个值。<em>MaxClients</em>是这些指令中最为重要的一个，设定的是 Apache可以同时处理的请求，是对Apache性能影响最大的参数。其缺省值150是远远不够的，如果请求总数已达到这个值（可通过<code>ps -ef|grep http|wc -l</code>来确认），那么后面的请求就要排队，直到某个已处理请求完毕。这就是系统资源还剩下很多而HTTP访问却很慢的主要原因。虽然理论上这个值越大，可以处理的请求就越多，但Apache默认的限制不能大于256。</p>
]]></content>
  </entry>
  
</feed>
